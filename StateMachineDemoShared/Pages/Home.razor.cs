// <auto-generated/>
using Masa.Blazor.Components.Treeview;
using OneOf.Types;
using StateMachine;
using System.Collections.Concurrent;

namespace StateMachineDemoShared.Pages
{
    public partial class Home
    {

        private ProcedureView pv = default!;
        private FSMSingleThreadExecutor? executor;

        protected override Task OnInitializedAsync()
        {
            //Task.Factory.StartNew(NodeStateCosumer);
            return base.OnInitializedAsync();
        }

        protected override Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender)
            {
                pv.Engine.GroupNodeStateChanged += Executor_NodeStateChanged;
                pv.Engine.GroupNodeExitChanged += Executor_NodeExitChanged;
            }
            return base.OnAfterRenderAsync(firstRender);
        }

        private void CreateExecutor()
        {
            if (executor is not null)
            {
                executor.FSMStateChanged -= Executor_FSMStateChanged;
                executor.NodeStateChanged -= Executor_NodeStateChanged;
                executor.NodeExitChanged -= Executor_NodeExitChanged;
            }
            if (pv.Engine.TryGetNode("Start", out IFSMNode StateState))
            {
                if (!pv.Engine.TryGetEvent("EndEvent", out FSMEvent end))
                {
                    end = new FSMEvent("EndEvent");
                }
                pv.Engine.ReinitGroupNode();
                executor = new FSMSingleThreadExecutor(StateState, end);
                executor.FSMStateChanged += Executor_FSMStateChanged;
                executor.NodeStateChanged += Executor_NodeStateChanged;
                executor.NodeExitChanged += Executor_NodeExitChanged;
            }
        }

        private async void Executor_NodeExitChanged(object? sender, string e)
        {
            if (pv is null)
                return;
            await pv.SetInactive(e);
            //nodeState.Add((e, false));
        }

        private async void Executor_NodeStateChanged(object? sender, string e)
        {
            if (pv is null)
                return;
            await pv.SetActive(e);
            //nodeState.Add((e, true));
        }

        private void Executor_FSMStateChanged(FSMSingleThreadExecutor arg1, FSMNodeState newState, FSMNodeState oldState)
        {
            switch (newState)
            {
                case FSMNodeState.Uninitialized:
                    break;
                case FSMNodeState.Initialized:
                    canStart = true;
                    canPause = false;
                    canContinue = false;
                    break;
                case FSMNodeState.Proceeding:
                case FSMNodeState.Running:
                    canStart = false;
                    canPause = true;
                    canContinue = false;
                    break;
                case FSMNodeState.Pausing:
                    canStart = false;
                    canPause = false;
                    canContinue = false;
                    break;
                case FSMNodeState.Interrupted:
                case FSMNodeState.Paused:
                    canStart = false;
                    canPause = false;
                    canContinue = true;
                    break;
                case FSMNodeState.Stopping:
                    canStart = false;
                    canPause = false;
                    canContinue = false;
                    break;
                case FSMNodeState.Finished:
                    canStart = true;
                    canPause = false;
                    canContinue = false;
                    break;
                case FSMNodeState.Stoped:
                    canStart = true;
                    canPause = false;
                    canContinue = false;
                    break;
                default:
                    canStart = false;
                    canPause = false;
                    canContinue = false;
                    break;
            }
            InvokeAsync(StateHasChanged);
        }
        private bool canStart = true;
        public async Task Start()
        {
            CreateExecutor();
            if (executor is not null)
            {
                await executor.RestartAsync();
            }
        }

        private bool canPause = false;
        public async Task Pause()
        {
            if (executor is not null)
            {
                await executor.PauseAsync();
            }
        }

        private bool canContinue = false;
        public void Continue()
        {
            if (executor is not null)
            {
                executor.Continue();
            }
        }

        public async Task Stop()
        {
            if (executor is not null)
            {
                await executor.StopAsync();
            }
        }
    }
}