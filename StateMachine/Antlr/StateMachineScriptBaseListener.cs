//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Work/StateMachine/Engine/StateMachineScript.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IStateMachineScriptListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class StateMachineScriptBaseListener : IStateMachineScriptListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="StateMachineScriptParser.machine"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMachine([NotNull] StateMachineScriptParser.MachineContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="StateMachineScriptParser.machine"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMachine([NotNull] StateMachineScriptParser.MachineContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="StateMachineScriptParser.namespace"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNamespace([NotNull] StateMachineScriptParser.NamespaceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="StateMachineScriptParser.namespace"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNamespace([NotNull] StateMachineScriptParser.NamespaceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="StateMachineScriptParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression([NotNull] StateMachineScriptParser.ExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="StateMachineScriptParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression([NotNull] StateMachineScriptParser.ExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DefState</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDefState([NotNull] StateMachineScriptParser.DefStateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DefState</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDefState([NotNull] StateMachineScriptParser.DefStateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DefState2</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDefState2([NotNull] StateMachineScriptParser.DefState2Context context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DefState2</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDefState2([NotNull] StateMachineScriptParser.DefState2Context context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DefGroupState</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDefGroupState([NotNull] StateMachineScriptParser.DefGroupStateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DefGroupState</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDefGroupState([NotNull] StateMachineScriptParser.DefGroupStateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DefBranch</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_branch"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDefBranch([NotNull] StateMachineScriptParser.DefBranchContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DefBranch</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_branch"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDefBranch([NotNull] StateMachineScriptParser.DefBranchContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DefBranch2</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_branch"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDefBranch2([NotNull] StateMachineScriptParser.DefBranch2Context context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DefBranch2</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_branch"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDefBranch2([NotNull] StateMachineScriptParser.DefBranch2Context context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PosDef</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_branch"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPosDef([NotNull] StateMachineScriptParser.PosDefContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PosDef</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_branch"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPosDef([NotNull] StateMachineScriptParser.PosDefContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ColorDef</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_branch"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterColorDef([NotNull] StateMachineScriptParser.ColorDefContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ColorDef</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_branch"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitColorDef([NotNull] StateMachineScriptParser.ColorDefContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeDef</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_branch"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeDef([NotNull] StateMachineScriptParser.TypeDefContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeDef</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_branch"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeDef([NotNull] StateMachineScriptParser.TypeDefContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>FlowIDDef</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_branch"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFlowIDDef([NotNull] StateMachineScriptParser.FlowIDDefContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>FlowIDDef</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_branch"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFlowIDDef([NotNull] StateMachineScriptParser.FlowIDDefContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="StateMachineScriptParser.position"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPosition([NotNull] StateMachineScriptParser.PositionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="StateMachineScriptParser.position"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPosition([NotNull] StateMachineScriptParser.PositionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>POSX</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.posx"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPOSX([NotNull] StateMachineScriptParser.POSXContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>POSX</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.posx"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPOSX([NotNull] StateMachineScriptParser.POSXContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>POSY</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.posy"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPOSY([NotNull] StateMachineScriptParser.POSYContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>POSY</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.posy"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPOSY([NotNull] StateMachineScriptParser.POSYContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DefEvent</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.event_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDefEvent([NotNull] StateMachineScriptParser.DefEventContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DefEvent</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.event_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDefEvent([NotNull] StateMachineScriptParser.DefEventContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DefTransition</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.transition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDefTransition([NotNull] StateMachineScriptParser.DefTransitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DefTransition</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.transition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDefTransition([NotNull] StateMachineScriptParser.DefTransitionContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
