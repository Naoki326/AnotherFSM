//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Work/StateMachine/Engine/StateMachineScript.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="StateMachineScriptParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IStateMachineScriptListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="StateMachineScriptParser.machine"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMachine([NotNull] StateMachineScriptParser.MachineContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="StateMachineScriptParser.machine"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMachine([NotNull] StateMachineScriptParser.MachineContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="StateMachineScriptParser.namespace"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNamespace([NotNull] StateMachineScriptParser.NamespaceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="StateMachineScriptParser.namespace"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNamespace([NotNull] StateMachineScriptParser.NamespaceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="StateMachineScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] StateMachineScriptParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="StateMachineScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] StateMachineScriptParser.ExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DefState</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDefState([NotNull] StateMachineScriptParser.DefStateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DefState</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDefState([NotNull] StateMachineScriptParser.DefStateContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DefState2</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDefState2([NotNull] StateMachineScriptParser.DefState2Context context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DefState2</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDefState2([NotNull] StateMachineScriptParser.DefState2Context context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DefGroupState</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDefGroupState([NotNull] StateMachineScriptParser.DefGroupStateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DefGroupState</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDefGroupState([NotNull] StateMachineScriptParser.DefGroupStateContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DefBranch</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_branch"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDefBranch([NotNull] StateMachineScriptParser.DefBranchContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DefBranch</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_branch"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDefBranch([NotNull] StateMachineScriptParser.DefBranchContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DefBranch2</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_branch"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDefBranch2([NotNull] StateMachineScriptParser.DefBranch2Context context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DefBranch2</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_branch"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDefBranch2([NotNull] StateMachineScriptParser.DefBranch2Context context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PosDef</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_branch"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPosDef([NotNull] StateMachineScriptParser.PosDefContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PosDef</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_branch"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPosDef([NotNull] StateMachineScriptParser.PosDefContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ColorDef</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_branch"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterColorDef([NotNull] StateMachineScriptParser.ColorDefContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ColorDef</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_branch"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitColorDef([NotNull] StateMachineScriptParser.ColorDefContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeDef</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_branch"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeDef([NotNull] StateMachineScriptParser.TypeDefContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeDef</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_branch"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeDef([NotNull] StateMachineScriptParser.TypeDefContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FlowIDDef</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_branch"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFlowIDDef([NotNull] StateMachineScriptParser.FlowIDDefContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FlowIDDef</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.state_branch"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFlowIDDef([NotNull] StateMachineScriptParser.FlowIDDefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="StateMachineScriptParser.position"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPosition([NotNull] StateMachineScriptParser.PositionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="StateMachineScriptParser.position"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPosition([NotNull] StateMachineScriptParser.PositionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>POSX</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.posx"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPOSX([NotNull] StateMachineScriptParser.POSXContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>POSX</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.posx"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPOSX([NotNull] StateMachineScriptParser.POSXContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>POSY</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.posy"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPOSY([NotNull] StateMachineScriptParser.POSYContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>POSY</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.posy"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPOSY([NotNull] StateMachineScriptParser.POSYContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DefEvent</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.event_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDefEvent([NotNull] StateMachineScriptParser.DefEventContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DefEvent</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.event_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDefEvent([NotNull] StateMachineScriptParser.DefEventContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DefTransition</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.transition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDefTransition([NotNull] StateMachineScriptParser.DefTransitionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DefTransition</c>
	/// labeled alternative in <see cref="StateMachineScriptParser.transition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDefTransition([NotNull] StateMachineScriptParser.DefTransitionContext context);
}
