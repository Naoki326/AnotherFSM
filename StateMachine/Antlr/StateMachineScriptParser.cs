//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Work/StateMachine/Engine/StateMachineScript.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class StateMachineScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, NONE=17, 
		NEXT=18, SUCCESS=19, FAILED=20, ERROR=21, BREAK=22, CANCEL=23, TRIGGER=24, 
		COLON=25, SEMICOLON=26, STRING=27, CODESTRING=28, INT=29, DOUBLE=30, WS=31, 
		COMMENT=32, LINE_COMMENT=33;
	public const int
		RULE_machine = 0, RULE_namespace = 1, RULE_expression = 2, RULE_state_statement = 3, 
		RULE_state_branch = 4, RULE_position = 5, RULE_posx = 6, RULE_posy = 7, 
		RULE_event_statement = 8, RULE_transition = 9;
	public static readonly string[] ruleNames = {
		"machine", "namespace", "expression", "state_statement", "state_branch", 
		"position", "posx", "posy", "event_statement", "transition"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'{'", "'}'", "'def'", "'as'", "'state'", "'('", 
		"')'", "'to'", "'branch'", "'Pos'", "'Color'", "'Type'", "'FlowID'", "','", 
		"'event'", "'none'", "'next'", "'success'", "'failed'", "'error'", "'break'", 
		"'cancel'", null, "':'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "NONE", "NEXT", "SUCCESS", "FAILED", "ERROR", 
		"BREAK", "CANCEL", "TRIGGER", "COLON", "SEMICOLON", "STRING", "CODESTRING", 
		"INT", "DOUBLE", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "StateMachineScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static StateMachineScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public StateMachineScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public StateMachineScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MachineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceContext[] @namespace() {
			return GetRuleContexts<NamespaceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceContext @namespace(int i) {
			return GetRuleContext<NamespaceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(StateMachineScriptParser.Eof, 0); }
		public MachineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_machine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.EnterMachine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.ExitMachine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStateMachineScriptVisitor<TResult> typedVisitor = visitor as IStateMachineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMachine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MachineContext machine() {
		MachineContext _localctx = new MachineContext(Context, State);
		EnterRule(_localctx, 0, RULE_machine);
		int _la;
		try {
			State = 33;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 687504400L) != 0)) {
					{
					{
					State = 20;
					expression();
					}
					}
					State = 25;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 29;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 26;
					@namespace();
					}
					}
					State = 31;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 32;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(StateMachineScriptParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.EnterNamespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.ExitNamespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStateMachineScriptVisitor<TResult> typedVisitor = visitor as IStateMachineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			Match(T__0);
			State = 36;
			Match(STRING);
			State = 37;
			Match(T__1);
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 687504400L) != 0)) {
				{
				{
				State = 38;
				expression();
				}
				}
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 44;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public State_statementContext state_statement() {
			return GetRuleContext<State_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Event_statementContext event_statement() {
			return GetRuleContext<Event_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransitionContext transition() {
			return GetRuleContext<TransitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public State_branchContext state_branch() {
			return GetRuleContext<State_branchContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStateMachineScriptVisitor<TResult> typedVisitor = visitor as IStateMachineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_expression);
		try {
			State = 50;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 46;
				state_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 47;
				event_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 48;
				transition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 49;
				state_branch();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class State_statementContext : ParserRuleContext {
		public State_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_state_statement; } }
	 
		public State_statementContext() { }
		public virtual void CopyFrom(State_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DefState2Context : State_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(StateMachineScriptParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(StateMachineScriptParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public State_branchContext[] state_branch() {
			return GetRuleContexts<State_branchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public State_branchContext state_branch(int i) {
			return GetRuleContext<State_branchContext>(i);
		}
		public DefState2Context(State_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.EnterDefState2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.ExitDefState2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStateMachineScriptVisitor<TResult> typedVisitor = visitor as IStateMachineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefState2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefStateContext : State_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(StateMachineScriptParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(StateMachineScriptParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public State_branchContext[] state_branch() {
			return GetRuleContexts<State_branchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public State_branchContext state_branch(int i) {
			return GetRuleContext<State_branchContext>(i);
		}
		public DefStateContext(State_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.EnterDefState(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.ExitDefState(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStateMachineScriptVisitor<TResult> typedVisitor = visitor as IStateMachineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefState(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefGroupStateContext : State_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(StateMachineScriptParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(StateMachineScriptParser.STRING, i);
		}
		public DefGroupStateContext(State_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.EnterDefGroupState(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.ExitDefGroupState(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStateMachineScriptVisitor<TResult> typedVisitor = visitor as IStateMachineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefGroupState(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public State_statementContext state_statement() {
		State_statementContext _localctx = new State_statementContext(Context, State);
		EnterRule(_localctx, 6, RULE_state_statement);
		int _la;
		try {
			State = 87;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				_localctx = new DefStateContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 52;
				Match(T__3);
				State = 53;
				Match(STRING);
				State = 54;
				Match(T__4);
				State = 55;
				Match(STRING);
				State = 56;
				Match(T__5);
				State = 57;
				Match(T__1);
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 553286656L) != 0)) {
					{
					{
					State = 58;
					state_branch();
					}
					}
					State = 63;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 64;
				Match(T__2);
				}
				break;
			case 2:
				_localctx = new DefState2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 65;
				Match(T__3);
				State = 66;
				Match(STRING);
				State = 67;
				Match(T__6);
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STRING) {
					{
					State = 68;
					Match(STRING);
					}
				}

				State = 71;
				Match(T__7);
				State = 72;
				Match(T__1);
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 553286656L) != 0)) {
					{
					{
					State = 73;
					state_branch();
					}
					}
					State = 78;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 79;
				Match(T__2);
				}
				break;
			case 3:
				_localctx = new DefGroupStateContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 80;
				Match(T__3);
				State = 81;
				Match(STRING);
				State = 82;
				Match(T__1);
				State = 83;
				Match(STRING);
				State = 84;
				Match(T__8);
				State = 85;
				Match(STRING);
				State = 86;
				Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class State_branchContext : ParserRuleContext {
		public State_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_state_branch; } }
	 
		public State_branchContext() { }
		public virtual void CopyFrom(State_branchContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FlowIDDefContext : State_branchContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(StateMachineScriptParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(StateMachineScriptParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(StateMachineScriptParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(StateMachineScriptParser.INT, 0); }
		public FlowIDDefContext(State_branchContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.EnterFlowIDDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.ExitFlowIDDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStateMachineScriptVisitor<TResult> typedVisitor = visitor as IStateMachineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlowIDDef(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefBranchContext : State_branchContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(StateMachineScriptParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(StateMachineScriptParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(StateMachineScriptParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(StateMachineScriptParser.SEMICOLON, 0); }
		public DefBranchContext(State_branchContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.EnterDefBranch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.ExitDefBranch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStateMachineScriptVisitor<TResult> typedVisitor = visitor as IStateMachineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefBranch(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PosDefContext : State_branchContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(StateMachineScriptParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PositionContext position() {
			return GetRuleContext<PositionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(StateMachineScriptParser.SEMICOLON, 0); }
		public PosDefContext(State_branchContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.EnterPosDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.ExitPosDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStateMachineScriptVisitor<TResult> typedVisitor = visitor as IStateMachineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPosDef(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeDefContext : State_branchContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(StateMachineScriptParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(StateMachineScriptParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(StateMachineScriptParser.SEMICOLON, 0); }
		public TypeDefContext(State_branchContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.EnterTypeDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.ExitTypeDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStateMachineScriptVisitor<TResult> typedVisitor = visitor as IStateMachineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDef(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefBranch2Context : State_branchContext {
		public IToken branch_type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(StateMachineScriptParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(StateMachineScriptParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(StateMachineScriptParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(StateMachineScriptParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(StateMachineScriptParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUCCESS() { return GetToken(StateMachineScriptParser.SUCCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAILED() { return GetToken(StateMachineScriptParser.FAILED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(StateMachineScriptParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(StateMachineScriptParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CANCEL() { return GetToken(StateMachineScriptParser.CANCEL, 0); }
		public DefBranch2Context(State_branchContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.EnterDefBranch2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.ExitDefBranch2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStateMachineScriptVisitor<TResult> typedVisitor = visitor as IStateMachineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefBranch2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ColorDefContext : State_branchContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(StateMachineScriptParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODESTRING() { return GetToken(StateMachineScriptParser.CODESTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(StateMachineScriptParser.SEMICOLON, 0); }
		public ColorDefContext(State_branchContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.EnterColorDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.ExitColorDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStateMachineScriptVisitor<TResult> typedVisitor = visitor as IStateMachineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColorDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public State_branchContext state_branch() {
		State_branchContext _localctx = new State_branchContext(Context, State);
		EnterRule(_localctx, 8, RULE_state_branch);
		int _la;
		try {
			State = 115;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
				_localctx = new DefBranchContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 89;
				Match(T__9);
				State = 90;
				Match(INT);
				State = 91;
				Match(TRIGGER);
				State = 92;
				Match(STRING);
				State = 93;
				Match(SEMICOLON);
				}
				break;
			case NONE:
			case SUCCESS:
			case FAILED:
			case ERROR:
			case BREAK:
			case CANCEL:
			case INT:
				_localctx = new DefBranch2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 94;
				((DefBranch2Context)_localctx).branch_type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 553254912L) != 0)) ) {
					((DefBranch2Context)_localctx).branch_type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 95;
				Match(TRIGGER);
				State = 96;
				Match(STRING);
				State = 97;
				Match(SEMICOLON);
				}
				break;
			case T__10:
				_localctx = new PosDefContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 98;
				Match(T__10);
				State = 99;
				Match(COLON);
				State = 100;
				position();
				State = 101;
				Match(SEMICOLON);
				}
				break;
			case T__11:
				_localctx = new ColorDefContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 103;
				Match(T__11);
				State = 104;
				Match(COLON);
				State = 105;
				Match(CODESTRING);
				State = 106;
				Match(SEMICOLON);
				}
				break;
			case T__12:
				_localctx = new TypeDefContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 107;
				Match(T__12);
				State = 108;
				Match(COLON);
				State = 109;
				Match(STRING);
				State = 110;
				Match(SEMICOLON);
				}
				break;
			case T__13:
				_localctx = new FlowIDDefContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 111;
				Match(T__13);
				State = 112;
				Match(COLON);
				State = 113;
				_la = TokenStream.LA(1);
				if ( !(_la==STRING || _la==INT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 114;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PosxContext posx() {
			return GetRuleContext<PosxContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PosyContext posy() {
			return GetRuleContext<PosyContext>(0);
		}
		public PositionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_position; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.EnterPosition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.ExitPosition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStateMachineScriptVisitor<TResult> typedVisitor = visitor as IStateMachineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPosition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionContext position() {
		PositionContext _localctx = new PositionContext(Context, State);
		EnterRule(_localctx, 10, RULE_position);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			Match(T__6);
			State = 118;
			posx();
			State = 119;
			Match(T__14);
			State = 120;
			posy();
			State = 121;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PosxContext : ParserRuleContext {
		public PosxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_posx; } }
	 
		public PosxContext() { }
		public virtual void CopyFrom(PosxContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class POSXContext : PosxContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(StateMachineScriptParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(StateMachineScriptParser.INT, 0); }
		public POSXContext(PosxContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.EnterPOSX(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.ExitPOSX(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStateMachineScriptVisitor<TResult> typedVisitor = visitor as IStateMachineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPOSX(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PosxContext posx() {
		PosxContext _localctx = new PosxContext(Context, State);
		EnterRule(_localctx, 12, RULE_posx);
		int _la;
		try {
			_localctx = new POSXContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			_la = TokenStream.LA(1);
			if ( !(_la==INT || _la==DOUBLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PosyContext : ParserRuleContext {
		public PosyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_posy; } }
	 
		public PosyContext() { }
		public virtual void CopyFrom(PosyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class POSYContext : PosyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(StateMachineScriptParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(StateMachineScriptParser.INT, 0); }
		public POSYContext(PosyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.EnterPOSY(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.ExitPOSY(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStateMachineScriptVisitor<TResult> typedVisitor = visitor as IStateMachineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPOSY(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PosyContext posy() {
		PosyContext _localctx = new PosyContext(Context, State);
		EnterRule(_localctx, 14, RULE_posy);
		int _la;
		try {
			_localctx = new POSYContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			_la = TokenStream.LA(1);
			if ( !(_la==INT || _la==DOUBLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_statementContext : ParserRuleContext {
		public Event_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_statement; } }
	 
		public Event_statementContext() { }
		public virtual void CopyFrom(Event_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DefEventContext : Event_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(StateMachineScriptParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(StateMachineScriptParser.SEMICOLON, 0); }
		public DefEventContext(Event_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.EnterDefEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.ExitDefEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStateMachineScriptVisitor<TResult> typedVisitor = visitor as IStateMachineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefEvent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_statementContext event_statement() {
		Event_statementContext _localctx = new Event_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_event_statement);
		int _la;
		try {
			_localctx = new DefEventContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			Match(T__3);
			State = 128;
			Match(STRING);
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 129;
				Match(T__4);
				}
			}

			State = 132;
			Match(T__15);
			State = 133;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransitionContext : ParserRuleContext {
		public TransitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transition; } }
	 
		public TransitionContext() { }
		public virtual void CopyFrom(TransitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DefTransitionContext : TransitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(StateMachineScriptParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(StateMachineScriptParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(StateMachineScriptParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(StateMachineScriptParser.SEMICOLON, 0); }
		public DefTransitionContext(TransitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.EnterDefTransition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStateMachineScriptListener typedListener = listener as IStateMachineScriptListener;
			if (typedListener != null) typedListener.ExitDefTransition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStateMachineScriptVisitor<TResult> typedVisitor = visitor as IStateMachineScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefTransition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransitionContext transition() {
		TransitionContext _localctx = new TransitionContext(Context, State);
		EnterRule(_localctx, 18, RULE_transition);
		try {
			_localctx = new DefTransitionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(STRING);
			State = 136;
			Match(TRIGGER);
			State = 137;
			Match(STRING);
			State = 138;
			Match(T__8);
			State = 139;
			Match(STRING);
			State = 140;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,33,143,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,1,0,5,0,22,8,0,10,0,12,0,25,9,0,1,0,5,0,28,8,0,10,
		0,12,0,31,9,0,1,0,3,0,34,8,0,1,1,1,1,1,1,1,1,5,1,40,8,1,10,1,12,1,43,9,
		1,1,1,1,1,1,2,1,2,1,2,1,2,3,2,51,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,60,
		8,3,10,3,12,3,63,9,3,1,3,1,3,1,3,1,3,1,3,3,3,70,8,3,1,3,1,3,1,3,5,3,75,
		8,3,10,3,12,3,78,9,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,88,8,3,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,116,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,
		6,1,7,1,7,1,8,1,8,1,8,3,8,131,8,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,
		1,9,1,9,0,0,10,0,2,4,6,8,10,12,14,16,18,0,3,3,0,17,17,19,23,29,29,2,0,
		27,27,29,29,1,0,29,30,151,0,33,1,0,0,0,2,35,1,0,0,0,4,50,1,0,0,0,6,87,
		1,0,0,0,8,115,1,0,0,0,10,117,1,0,0,0,12,123,1,0,0,0,14,125,1,0,0,0,16,
		127,1,0,0,0,18,135,1,0,0,0,20,22,3,4,2,0,21,20,1,0,0,0,22,25,1,0,0,0,23,
		21,1,0,0,0,23,24,1,0,0,0,24,34,1,0,0,0,25,23,1,0,0,0,26,28,3,2,1,0,27,
		26,1,0,0,0,28,31,1,0,0,0,29,27,1,0,0,0,29,30,1,0,0,0,30,34,1,0,0,0,31,
		29,1,0,0,0,32,34,5,0,0,1,33,23,1,0,0,0,33,29,1,0,0,0,33,32,1,0,0,0,34,
		1,1,0,0,0,35,36,5,1,0,0,36,37,5,27,0,0,37,41,5,2,0,0,38,40,3,4,2,0,39,
		38,1,0,0,0,40,43,1,0,0,0,41,39,1,0,0,0,41,42,1,0,0,0,42,44,1,0,0,0,43,
		41,1,0,0,0,44,45,5,3,0,0,45,3,1,0,0,0,46,51,3,6,3,0,47,51,3,16,8,0,48,
		51,3,18,9,0,49,51,3,8,4,0,50,46,1,0,0,0,50,47,1,0,0,0,50,48,1,0,0,0,50,
		49,1,0,0,0,51,5,1,0,0,0,52,53,5,4,0,0,53,54,5,27,0,0,54,55,5,5,0,0,55,
		56,5,27,0,0,56,57,5,6,0,0,57,61,5,2,0,0,58,60,3,8,4,0,59,58,1,0,0,0,60,
		63,1,0,0,0,61,59,1,0,0,0,61,62,1,0,0,0,62,64,1,0,0,0,63,61,1,0,0,0,64,
		88,5,3,0,0,65,66,5,4,0,0,66,67,5,27,0,0,67,69,5,7,0,0,68,70,5,27,0,0,69,
		68,1,0,0,0,69,70,1,0,0,0,70,71,1,0,0,0,71,72,5,8,0,0,72,76,5,2,0,0,73,
		75,3,8,4,0,74,73,1,0,0,0,75,78,1,0,0,0,76,74,1,0,0,0,76,77,1,0,0,0,77,
		79,1,0,0,0,78,76,1,0,0,0,79,88,5,3,0,0,80,81,5,4,0,0,81,82,5,27,0,0,82,
		83,5,2,0,0,83,84,5,27,0,0,84,85,5,9,0,0,85,86,5,27,0,0,86,88,5,3,0,0,87,
		52,1,0,0,0,87,65,1,0,0,0,87,80,1,0,0,0,88,7,1,0,0,0,89,90,5,10,0,0,90,
		91,5,29,0,0,91,92,5,24,0,0,92,93,5,27,0,0,93,116,5,26,0,0,94,95,7,0,0,
		0,95,96,5,24,0,0,96,97,5,27,0,0,97,116,5,26,0,0,98,99,5,11,0,0,99,100,
		5,25,0,0,100,101,3,10,5,0,101,102,5,26,0,0,102,116,1,0,0,0,103,104,5,12,
		0,0,104,105,5,25,0,0,105,106,5,28,0,0,106,116,5,26,0,0,107,108,5,13,0,
		0,108,109,5,25,0,0,109,110,5,27,0,0,110,116,5,26,0,0,111,112,5,14,0,0,
		112,113,5,25,0,0,113,114,7,1,0,0,114,116,5,26,0,0,115,89,1,0,0,0,115,94,
		1,0,0,0,115,98,1,0,0,0,115,103,1,0,0,0,115,107,1,0,0,0,115,111,1,0,0,0,
		116,9,1,0,0,0,117,118,5,7,0,0,118,119,3,12,6,0,119,120,5,15,0,0,120,121,
		3,14,7,0,121,122,5,8,0,0,122,11,1,0,0,0,123,124,7,2,0,0,124,13,1,0,0,0,
		125,126,7,2,0,0,126,15,1,0,0,0,127,128,5,4,0,0,128,130,5,27,0,0,129,131,
		5,5,0,0,130,129,1,0,0,0,130,131,1,0,0,0,131,132,1,0,0,0,132,133,5,16,0,
		0,133,134,5,26,0,0,134,17,1,0,0,0,135,136,5,27,0,0,136,137,5,24,0,0,137,
		138,5,27,0,0,138,139,5,9,0,0,139,140,5,27,0,0,140,141,5,26,0,0,141,19,
		1,0,0,0,11,23,29,33,41,50,61,69,76,87,115,130
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
